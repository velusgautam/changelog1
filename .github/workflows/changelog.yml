# This workflow will read the PR to master branch and update the CHANGELOG.md file
# It reads the PR title and body and link any Jira Ticket form the jira keys.
# Then it pulls the latest CHANGELOG.md from master and append it with new body from PR
# Then it creates a new commit to the REF Branch where PR is made.

name: CHANGELOG

on:
  pull_request:
    types: [opened, edited, synchronize]
  # branches:
  #    - main
  # issue_comment:
  #  types: [created]
jobs:
  create-changelog:
    name: Changelog based on release PR
    runs-on: ubuntu-latest
    steps:
      # - name: Setup Node
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 14
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Get git log diff from merged branches
        id: merges
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github.event.action) }}
        if: github.event.action == 'edited' || github.event.action == 'opened'
        run: |
          echo "$GITHUB_CONTEXT"
          git fetch origin $GITHUB_BASE_REF:$GITHUB_BASE_REF
          git fetch origin $GITHUB_HEAD_REF:$GITHUB_HEAD_REF
          diff=$(git log $GITHUB_BASE_REF..$GITHUB_HEAD_REF --merges --pretty=format:"- %b-eol-" | sed '/^\s*$/d')
          echo "$diff"
          echo "::set-output name=logdiff::"$diff""

      - name: Using git log to generate Release PR
        uses: actions/github-script@v4
        id: create-change-log
        env:
          LOGS: ${{ steps.merges.outputs.logdiff }}
        with:
          script: |
            console.log("=========Mereged Commits START =========");
            console.log(process.env.LOGS)
            console.log("=========Mereged Commits END =========");
            const isNewRelease = (context.payload.pull_request.action === "edited" || context.payload.pull_request.action === "opened");
            console.log("=========isNewRelease START =========");
            console.log(context.payload.pull_request.action)
            console.log(isNewRelease)
            console.log("=========isNewRelease END =========");

            const title = context.payload.pull_request.title;
            const jira_base = 'https://discoveryinc.atlassian.net/browse/'
            const fr_regex = /((?!(FR|fr)-?$){1}[FR0-9fr]+-\d+)/g;

            let body = '';
            if(isNewRelease){
              body = process.env.LOGS;
            }else{
              body = context.payload.pull_request.body.replace(/"/g,"'");
            }
            let releaseBody = body.replace(/-eol-/g,"\n").replace(/"/g,"'").trim();
            if(!releaseBody.includes(jira_base)){
             releaseBody = releaseBody.replace(fr_regex, jira_key =>`[${jira_key}](${jira_base}${jira_key})`);
            }

            console.log("=========releaseBody START =========");
            console.log(releaseBody)
            console.log("=========releaseBody END =========");


            const releaseLog = `
            ## ${title}

            ${releaseBody}
            `;
            if(isNewRelease){
              const request = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                title: context.payload.pull_request.title,
                body: `
                ${releaseBody}
                `
              };

              const response = await github.pulls.update(request);

              core.info(`Response: ${response.status}`);
              if (response.status !== 200) {
                core.error('Updating the pull request has failed');
              }
            }

            core.setOutput('changelog', releaseLog);

      - uses: actions/checkout@v2
      - name: Create changelog commit
        run: |
          git fetch origin $GITHUB_BASE_REF:$GITHUB_BASE_REF $GITHUB_HEAD_REF:$GITHUB_HEAD_REF
          git switch $GITHUB_HEAD_REF
          git checkout $GITHUB_BASE_REF CHANGELOG.md
          echo "${{steps.create-change-log.outputs.changelog}}" >> CHANGELOG.md
          git add CHANGELOG.md
          git config user.name github-actions
          git config user.email github-actions@github.com
          git diff-index --quiet HEAD || git commit -m "Changelog Commit"
          git push --set-upstream origin $GITHUB_HEAD_REF --no-verify
