# This workflow will SET the PR body based on merge commit diff
# It reads the PR title, body then it links the Jira Ticket form the jira keys.
# Then it pulls the latest CHANGELOG.md from master and append it with new changes from PR
# Then it commits CHANGELOG.md to the REFERENCE Branch in the PR.

name: CHANGELOG

on:
  pull_request:
    types: [opened, reopened, edited]
    branches: [main]

jobs:
  create-changelog:
    name: Changelog based on release PR
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.ACTION_TOKEN }}
      - name: Get git logg diff
        id: merges
        shell: bash
        if: github.event.action == 'reopened' || github.event.action == 'opened'
        run: |
          git fetch origin $GITHUB_BASE_REF:$GITHUB_BASE_REF $GITHUB_HEAD_REF:$GITHUB_HEAD_REF
          diff=$(git log $GITHUB_BASE_REF..$GITHUB_HEAD_REF --merges --pretty=format:"- %b-eol-" | sed '/^\s*$/d')
          echo "$diff"
          echo "::set-output name=logdiff::"$diff""

      - name: Using git log to generate Release PR
        uses: actions/github-script@v4
        id: create-change-log
        env:
          LOGS: ${{ steps.merge-log.outputs.logdiff }}
        with:
          script: |
            const title = context.payload.pull_request.title;
            const jira_base = 'https://discoveryinc.atlassian.net/browse/';
            const fr_regex = /fr-\d+/gi;
            
            console.log(JSON.stringify(context.payload.pull_request, undefined, 2));
            

            const isNewRelease =
              context.payload.action === 'opened' || context.payload.action === 'reopened';
              
            const body = isNewRelease
              ? process.env.LOGS
              : context.payload.pull_request.body;

            core.info(`MERGE DIFF BODY DATA: ${body}`);

            let releaseBody = body
              .replace(/- -eol-/g, '')
              .trim()
              .replace(/-eol-/g, '\n')
              .replace(/"/g, "'");
              
            const requestBody = `
            ${releaseBody}
            `;

            core.info(`RELEASE PR BODY DATA: ${releaseBody}`);

            if (isNewRelease) {
              const request = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                title: context.payload.pull_request.title,
                body: requestBody,
              };
              const response = await github.pulls.update(request);
              if (response.status === 200) {
                core.info(`UPDATE PR BODY: Success`);
              } else {
                core.error('UPDATE PR BODY: Failed');
              }
            }

            if (!releaseBody.includes(jira_base)) {
              releaseBody = releaseBody.replace(
                fr_regex,
                (jira_key) => `[${jira_key}](${jira_base}${jira_key})`
              );
            }

            core.info(`RELEASE CHANGELOG BODY DATA: ${releaseBody}`);

            const releaseLog = `
            ## ${title}

            ${releaseBody}
            `;

            core.setOutput('changelog', releaseLog);

      - name: Create changelog commit
        run: |
          git fetch origin $GITHUB_BASE_REF:$GITHUB_BASE_REF $GITHUB_HEAD_REF:$GITHUB_HEAD_REF
          git switch $GITHUB_HEAD_REF
          git checkout $GITHUB_BASE_REF CHANGELOG.md
          echo -e "$(head -n 1 CHANGELOG.md)${{steps.create-change-log.outputs.changelog}}$(tail -n +2  CHANGELOG.md)" > CHANGELOG.md
          git add CHANGELOG.md
          git config user.name github-actions
          git config user.email github-actions@github.com
          git diff-index --quiet HEAD || git commit -m "Changelog Commit"
          git push --set-upstream origin $GITHUB_HEAD_REF --no-verify
